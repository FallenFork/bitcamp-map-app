{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/jasonli/Documents/Z%20-%20Projects/BIT_CAMP/bitcamp-map-app/bitcamp-map-app/src/components/map/GoogleMapComponent.tsx"],"sourcesContent":["// \"use client\";\n\n// import type React from \"react\";\n// import { useState, useCallback, useRef } from \"react\";\n// import { GoogleMap, LoadScript, Marker, InfoWindow, Polyline } from \"@react-google-maps/api\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardContent } from \"@/components/ui/card\";\n// import { Input } from \"@/components/ui/input\";\n// import * as RadixSlider from \"@radix-ui/react-slider\"\n\n// import dotenv from 'dotenv'\n// import axios, { AxiosError } from \"axios\";\n// import { ApiError } from \"next/dist/server/api-utils\";\n// dotenv.config();\n\n// // Use environment variable for API key (will be replaced with a placeholder for demo purposes)\n// const GOOGLE_MAPS_API_KEY = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY\n// const BACKEND_URL = \"http://127.0.0.1:3002\"\n\n// if (!GOOGLE_MAPS_API_KEY) {\n//   // you can throw error here and \n//   // let [Error Boundary](https://reactjs.org/docs/error-boundaries.html)\n//   // handle it\n//   // or return an component that says \"Google Token is not set\"\n//   throw new Error('Google token is not set');\n// }\n\n// // Define container style for the map\n// const containerStyle = {\n//   width: '100%',\n//   height: '500px'\n// };\n\n// // Initial center of the map (world view)\n// const initialCenter = {\n//   lat: 20,\n//   lng: 0\n// };\n\n// interface MarkerData {\n//   id: number;\n//   position: google.maps.LatLngLiteral;\n//   elevation: number | null;\n//   loading: boolean;\n// }\n\n// /** Structure for geographic bounds (used for map fitting) */\n// interface Bounds {\n//   southwest: google.maps.LatLngLiteral;\n//   northeast: google.maps.LatLngLiteral;\n// }\n\n// /**\n//  * Expected structure of the successful response from the `/api/determine-route`\n//  * backend endpoint. **Adjust this based on the exact fields your `determine_route` returns.**\n//  */\n// interface RouteResult {\n//   // Fields returned by your backend's determine_route function\n//   index?: number; // Optional, from your backend example\n//   summary?: string; // Optional, from your backend example\n//   duration_text?: string; // Optional\n//   duration_numerical?: number; // Optional (renamed from backend example for consistency)\n//   distance_text?: string; // Optional\n//   distance_numerical?: number; // Optional (renamed from backend example for consistency)\n//   encoded_polyline: string; // The crucial field for drawing the route\n//   bounds?: Bounds | null; // Optional: Important for map fitting (Make sure backend returns this structure if needed)\n//   // Add any other relevant fields your backend returns\n//   message?: string; // Example: Add a message field if your backend sends one\n//   slider_input?: number; // Example: Include the slider value used\n// }\n\n// interface DistanceElevationSliderProps {\n//   onValueChange?: (value: number) => void\n// }\n\n// function DistanceElevationSlider({ onValueChange }: DistanceElevationSliderProps) {\n//   const [value, setValue] = useState(50)\n\n//   const handleValueChange = (newValue: number[]) => {\n//     setValue(newValue[0])\n//     onValueChange?.(newValue[0])\n//     console.log(newValue[0])\n//   }\n\n//   return (\n//     <div className=\"w-full max-w-md\">\n//       <div className=\"relative pt-6 pb-2\">\n//         <div className=\"absolute inset-0 flex justify-between items-start pointer-events-none z-10\">\n//           <span className=\"text-gray-600 mb-4\">Distance</span>\n//           <span className=\"text-gray-600 mb-4\">Elevation</span>\n//         </div>\n\n//         {/* Track background */}\n//         <div className=\"absolute inset-x-0 top-8 bottom-4 bg-gradient-to-r from-blue-500 to-green-500 rounded-full\" />\n\n//         {/* Slider with bubble inside Thumb */}\n//         <RadixSlider.Root\n//           value={[value]}\n//           onValueChange={handleValueChange}\n//           max={100}\n//           step={1}\n//           className=\"relative z-20 flex items-center h-10 w-full touch-none select-none\"\n//         >\n//           <RadixSlider.Track className=\"bg-transparent relative h-2 w-full rounded-full\">\n//             <RadixSlider.Range className=\"absolute h-full bg-transparent\" />\n//           </RadixSlider.Track>\n\n//           <RadixSlider.Thumb\n//             className=\"group relative block w-6 h-6 bg-white border border-gray-300 shadow-md rounded-full focus:outline-none\"\n//             aria-label=\"Slider thumb\"\n//           >\n//             <div className=\"absolute -top-10 left-1/2 -translate-x-1/2 px-2 py-1 bg-white text-sm font-medium rounded-md shadow-md z-30 whitespace-nowrap\">\n//               {value}%\n//             </div>\n//           </RadixSlider.Thumb>\n//         </RadixSlider.Root>\n//       </div>\n\n//       {/* Bottom labels */}\n//       <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n//       </div>\n//     </div>\n//   )\n// }\n\n\n// const GoogleMapComponent: React.FC = () => {\n//   const [map, setMap] = useState<google.maps.Map | null>(null);\n//   const [markers, setMarkers] = useState<MarkerData[]>([]);\n//   const [selectedMarker, setSelectedMarker] = useState<MarkerData | null>(null);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [sliderValue, setSliderValue] = useState<number>(50);\n//   const [routeResult, setRouteResult] = useState<RouteResult | null>(null); // **NEW: State for route data**\n//   const [isLoading, setIsLoading] = useState<boolean>(false); // **NEW: Loading state**\n//   const [error, setError] = useState<string | null>(null); // **NEW: Error state**\n//   const geocoderRef = useRef<google.maps.Geocoder | null>(null);\n//   const elevationServiceRef = useRef<google.maps.ElevationService | null>(null);\n\n//   // Initialize map\n//   const onLoad = (map: google.maps.Map) => {\n//     setMap(map);\n//     geocoderRef.current = new google.maps.Geocoder();\n//     elevationServiceRef.current = new google.maps.ElevationService();\n//   };\n\n//   const onUnmount = useCallback(() => {\n//     setMap(null);\n//   }, []);\n\n//   // Function to handle map clicks\n//   const handleMapClick = useCallback((event: google.maps.MapMouseEvent) => {\n//     if (isLoading) return;\n//     if (event.latLng) {\n//       const newMarker: MarkerData = {\n//         id: Date.now(),\n//         position: {\n//           lat: event.latLng.lat(),\n//           lng: event.latLng.lng()\n//         },\n//         elevation: null,\n//         loading: true\n//       };\n\n//       setMarkers(prev => {\n//         if (prev.length >= 2) return prev;\n//         return [...prev, newMarker];\n//       });\n\n//       // Get elevation data\n//       if (elevationServiceRef.current) {\n//         elevationServiceRef.current.getElevationForLocations({\n//           locations: [{ lat: event.latLng.lat(), lng: event.latLng.lng() }]\n//         }, (results, status) => {\n//           if (status === 'OK' && results && results[0]) {\n//             setMarkers(prev =>\n//               prev.map(marker =>\n//                 marker.id === newMarker.id\n//                   ? { ...marker, elevation: results[0].elevation, loading: false }\n//                   : marker\n//               )\n//             );\n//           } else {\n//             setMarkers(prev =>\n//               prev.map(marker =>\n//                 marker.id === newMarker.id\n//                   ? { ...marker, elevation: null, loading: false }\n//                   : marker\n//               )\n//             );\n//           }\n//         });\n//       }\n//     }\n//   }, []);\n\n//   // Function to handle search\n//   const handleSearch = () => {\n//     if (isLoading) return;\n//     if (geocoderRef.current && searchQuery.trim() !== '') {\n//       geocoderRef.current.geocode({ address: searchQuery }, (results, status) => {\n//         if (status === 'OK' && results && results[0]) {\n//           const location = results[0].geometry.location;\n\n//           // Center the map on the search result\n//           if (map) {\n//             map.setCenter(location);\n//             map.setZoom(14);\n//           }\n\n//           // Create a new marker at the search location\n//           const newMarker: MarkerData = {\n//             id: Date.now(),\n//             position: {\n//               lat: location.lat(),\n//               lng: location.lng()\n//             },\n//             elevation: null,\n//             loading: true\n//           };\n\n//           // setMarkers(prev => [...prev, newMarker]);\n\n//           // Get elevation data\n//           if (elevationServiceRef.current) {\n//             elevationServiceRef.current.getElevationForLocations({\n//               locations: [{ lat: location.lat(), lng: location.lng() }]\n//             }, (elevResults, elevStatus) => {\n//               if (elevStatus === 'OK' && elevResults && elevResults[0]) {\n//                 setMarkers(prev =>\n//                   prev.map(marker =>\n//                     marker.id === newMarker.id\n//                       ? { ...marker, elevation: elevResults[0].elevation, loading: false }\n//                       : marker\n//                   )\n//                 );\n//               } else {\n//                 setMarkers(prev =>\n//                   prev.map(marker =>\n//                     marker.id === newMarker.id\n//                       ? { ...marker, elevation: null, loading: false }\n//                       : marker\n//                   )\n//                 );\n//               }\n//             });\n//           }\n//         }\n//       });\n//     }\n//   };\n\n//   const callDetermineRouteAPI = useCallback(async (start: google.maps.LatLngLiteral, end: google.maps.LatLngLiteral, sliderVal: number) => {\n//     console.log(\"getting route\")\n//     setIsLoading(true);\n//     setError(null);\n//     setRouteResult(null); // Clear previous route during loading\n\n//     try {\n//       const targetUrl = `${BACKEND_URL}/api/determine-route`;\n//       console.log(`Calling ${targetUrl} with:`, { start, end, sliderVal });\n\n//       const response = await axios.post<RouteResult>(targetUrl, {\n//         start: start,        // Send {lat, lng} object\n//         end: end,          // Send {lat, lng} object\n//         sliderValue: sliderVal // Send the number\n//       });\n\n//       console.log('Backend response:', response.data);\n//       setRouteResult(response.data); // Store the successful result\n\n//       // Fit map to bounds if available and valid\n//       if (response.data.bounds?.southwest && response.data.bounds?.northeast && map) {\n//         try {\n//           const bounds = new window.google.maps.LatLngBounds(\n//             response.data.bounds.southwest,\n//             response.data.bounds.northeast\n//           );\n//           map.fitBounds(bounds);\n//           map.panBy(0, 0); // Nudge map\n//         } catch (boundsError) {\n//           console.error(\"Error processing bounds:\", boundsError);\n//           // Don't set global error, just log problem with bounds\n//         }\n//       } else if (response.data.encoded_polyline) {\n//         // Fallback: Fit bounds based on polyline if bounds not provided/valid\n//         const decodedPath = decodePolyline(response.data.encoded_polyline);\n//         if (decodedPath.length > 0 && map && window.google?.maps?.LatLngBounds) {\n//           const bounds = new window.google.maps.LatLngBounds();\n//           decodedPath.forEach(point => bounds.extend(point));\n//           map.fitBounds(bounds);\n//           map.panBy(0, 0);\n//         }\n//       }\n\n\n//     } catch (err) {\n//       console.error('Error determining route:', err);\n//       let errorMsg = 'Failed to determine route.';\n//       if (axios.isAxiosError(err)) {\n//         const axiosError = err as AxiosError<ApiError>; // Type the error\n//         errorMsg = axiosError.message || errorMsg;\n//       } else if (err instanceof Error) {\n//         errorMsg = err.message;\n//       }\n//       setError(errorMsg);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   }, [map]); // Depend on map instance\n\n//   const decodePolyline = (encodedPolyline: string): google.maps.LatLng[] => {\n\n//     if (!encodedPolyline || typeof window.google?.maps?.geometry?.encoding?.decodePath !== 'function') {\n//       console.warn(\"Geometry library not available for polyline decoding.\");\n//       return [];\n//     }\n//     try {\n//       return window.google.maps.geometry.encoding.decodePath(encodedPolyline);\n//     } catch (e) {\n//       console.error(\"Failed to decode polyline:\", encodedPolyline, e);\n//       return [];\n//     }\n//   };\n\n//   // Function handles generate\n//   const handleGenerate = () => {\n//     if (markers.length !== 2) {\n//       alert(\"Please place exactly two markers to generate a path.\");\n//       return;\n//     }\n\n//     const [start, end] = markers;\n\n//     callDetermineRouteAPI(start.position, end.position, Math.floor(sliderValue / 10))\n\n//     // call the generate route function to generate a route \n\n//     // Example: Log the path start and end\n//     console.log(\"Generating path from:\", start.position, \"to\", end.position);\n\n//     // PLACEHOLDER: Call your path-generating logic here\n//     // generatePath(start.position, end.position);\n//   }\n\n//   // Function to clear all markers\n//   const clearMarkers = () => {\n//     setMarkers([]);\n//     setSelectedMarker(null);\n//     window.location.reload();\n//   };\n\n//   const handleSliderChange = (value: number) => {\n//     setSliderValue(value)\n//   }\n\n\n//   return (\n//     <div className=\"relative w-full\">\n//       <DistanceElevationSlider onValueChange={handleSliderChange} />\n//       <div className=\"mb-4 flex gap-2\">\n//         <Input\n//           type=\"text\"\n//           placeholder=\"Search for a location\"\n//           value={searchQuery}\n//           onChange={(e) => setSearchQuery(e.target.value)}\n//           onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n//           className=\"flex-grow\"\n//         />\n//         <Button onClick={handleSearch}>Search</Button>\n//         <Button variant=\"outline\" onClick={clearMarkers}>Reset</Button>\n//       </div>\n\n//       <Card className=\"border border-border shadow-sm\">\n//         <CardContent className=\"p-0 overflow-hidden rounded-md\">\n//           <LoadScript googleMapsApiKey={GOOGLE_MAPS_API_KEY} libraries={[\"places\"]}>\n//             <GoogleMap\n//               mapContainerStyle={containerStyle}\n//               center={initialCenter}\n//               zoom={2}\n//               onClick={handleMapClick}\n//               onLoad={onLoad}\n//               onUnmount={onUnmount}\n//               options={{\n//                 fullscreenControl: true,\n//                 mapTypeControl: true,\n//                 streetViewControl: false,\n//                 zoomControl: true,\n//               }}\n//             >\n//               {markers.map((marker, index) => (\n//                 <Marker\n//                   key={marker.id}\n//                   position={marker.position}\n//                   onClick={() => setSelectedMarker(marker)}\n//                   label={{\n//                     text: index === 0 ? \"Start\" : \"End\",\n//                     className: \"text-sm font-semibold text-white bg-blue-400 px-1 py-0.5 rounded\",\n//                   }}\n//                 />\n//               ))}\n\n//               {selectedMarker && (\n//                 <InfoWindow\n//                   position={selectedMarker.position}\n//                   onCloseClick={() => setSelectedMarker(null)}\n//                 >\n//                   <div className=\"p-2\">\n//                     <h3 className=\"font-semibold\">Location Information</h3>\n//                     <p>Latitude: {selectedMarker.position.lat.toFixed(6)}</p>\n//                     <p>Longitude: {selectedMarker.position.lng.toFixed(6)}</p>\n//                     <p>\n//                       Elevation: {selectedMarker.loading\n//                         ? 'Loading...'\n//                         : selectedMarker.elevation !== null\n//                           ? `${selectedMarker.elevation.toFixed(2)} meters`\n//                           : 'Not available'}\n//                     </p>\n//                   </div>\n//                 </InfoWindow>\n//               )}\n//               {routeResult?.encoded_polyline && (\n//                 <Polyline\n//                   path={decodePolyline(routeResult.encoded_polyline)}\n//                   options={{ strokeColor: '#1a73e8', strokeWeight: 5, strokeOpacity: 0.8 }} // Google Maps blue\n//                 />\n//               )}\n//             </GoogleMap>\n//           </LoadScript>\n//         </CardContent>\n//       </Card>\n\n//       <div className=\"mt-4\">\n\n//         <Button onClick={handleGenerate} disabled={isLoading || markers.length !== 2}>Generate Path</Button>\n//         {routeResult && (\n//           <div className=\"route-details section mt-4 p-4 border rounded-md bg-secondary/50\">\n//             <h2 className=\"text-lg font-semibold mb-2\">Determined Route Details</h2>\n//             {routeResult.summary && <p><strong>Summary:</strong> {routeResult.summary}</p>}\n//             {routeResult.duration_text && <p><strong>Duration:</strong> {routeResult.duration_text}</p>}\n//             {routeResult.distance_text && <p><strong>Distance:</strong> {routeResult.distance_text}</p>}\n//             {routeResult.slider_input !== undefined && <p><strong>Slider Value Used:</strong> {routeResult.slider_input}</p>}\n//             {/* Display other fields from your RouteResult if needed */}\n//           </div>\n//         )}\n//         <br />\n//         <br />\n//         <h2 className=\"text-2xl font-semibold text-blue-400\">Markers</h2>\n//         {markers.length > 0 ? (\n//           <div className=\"space-y-2\">\n//             {markers.map((marker) => (\n//               <Card key={marker.id} className=\"p-3\">\n//                 <div className=\"flex justify-between\">\n//                   <div>\n//                     <p>Lat: {marker.position.lat.toFixed(6)}, Lng: {marker.position.lng.toFixed(6)}</p>\n//                     <p className=\"font-medium\">\n//                       Elevation: {marker.loading\n//                         ? 'Loading...'\n//                         : marker.elevation !== null\n//                           ? `${marker.elevation.toFixed(2)} meters`\n//                           : 'Not available'}\n//                     </p>\n//                   </div>\n//                   <Button\n//                     variant=\"ghost\"\n//                     size=\"sm\"\n//                     onClick={() => {\n//                       setMarkers(prev => prev.filter(m => m.id !== marker.id));\n//                       if (selectedMarker?.id === marker.id) {\n//                         setSelectedMarker(null);\n//                       }\n//                     }}\n//                   >\n//                     Remove\n//                   </Button>\n//                 </div>\n//               </Card>\n//             ))}\n//           </div>\n//         ) : (\n//           <p className=\"text-muted-foreground\">Click on the map to place markers.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default GoogleMapComponent;\n"],"names":[],"mappings":"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","debugId":null}}]
}